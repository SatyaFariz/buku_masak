"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GraphQLDateTime = exports.GraphQLPassword = exports.GraphQLLimitedString = exports.GraphQLUUID = exports.GraphQLURL = exports.GraphQLEmail = void 0;

var _error = require("graphql/error");

var _language = require("graphql/language");

var _factory = require("./factory");

var _types = require("./types");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var factory = new _factory.Factory();
var GraphQLEmail = factory.getRegexScalar({
  name: 'Email',
  regex: /^(([^<>()[\]\.,;:\s@\"]+(\.[^<>()[\]\.,;:\s@\"]+)*)|(\".+\"))@(([^<>()[\]\.,;:\s@\"]+\.)+[^<>()[\]\.,;:\s@\"]{2,})$/i,
  description: 'The Email scalar type represents E-Mail addresses compliant to RFC 822.',
  error: 'Query error: Not a valid Email address'
});
exports.GraphQLEmail = GraphQLEmail;
var GraphQLURL = factory.getRegexScalar({
  name: 'URL',
  // RegExp taken from https://gist.github.com/dperini/729294
  regex: new RegExp("^(?:(?:https?|ftp)://)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))\\.?)(?::\\d{2,5})?(?:[/?#]\\S*)?$", 'i'),
  description: 'The URL scalar type represents URL addresses.',
  error: 'Query error: Not a valid URL'
});
exports.GraphQLURL = GraphQLURL;
var GraphQLUUID = factory.getRegexScalar({
  name: 'UUID',
  // https://github.com/chriso/validator.js/blob/master/src/lib/isUUID.js#L7
  regex: new RegExp('^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$', 'i'),
  description: 'The UUID scalar type represents a UUID.',
  error: 'Query error: Not a valid UUID'
});
exports.GraphQLUUID = GraphQLUUID;

var stringValidator = function stringValidator(ast) {
  if (ast.kind !== _language.Kind.STRING) {
    throw new _error.GraphQLError('Query error: Can only parse strings got a: ' + ast.kind, [ast]);
  }
};

var lengthValidator = function lengthValidator(ast, min, max) {
  if (ast.value.length < min) {
    throw new _error.GraphQLError('Query error: String not long enough', [ast]);
  }

  if (max && ast.value.length > max) {
    throw new _error.GraphQLError('Query error: String too long', [ast]);
  }
};

var alphabetValidator = function alphabetValidator(ast, alphabet) {
  var _iterator = _createForOfIteratorHelper(ast.value),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _char = _step.value;

      if (alphabet.indexOf(_char) < 0) {
        throw new _error.GraphQLError('Query error: Invalid character found', [ast]);
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
};

var complexityValidator = function complexityValidator(ast, options) {
  var complexity = options || {};
  var alhpaNumericRe = /^(?=.*[0-9])(?=.*[a-zA-Z])(.+)$/;
  var mixedCaseRe = /^(?=.*[a-z])(?=.*[A-Z])(.+)$/;
  var specialCharsRe = /^(?=.*[^a-zA-Z0-9])(.+)$/;

  if (complexity.alphaNumeric && !alhpaNumericRe.test(ast.value)) {
    throw new _error.GraphQLError('Query error: String must contain at least one number and one letter', [ast]);
  }

  if (complexity.mixedCase && !mixedCaseRe.test(ast.value)) {
    throw new _error.GraphQLError('Query error: String must contain at least one uper and one lower case letter', [ast]);
  }

  if (complexity.specialChars && !specialCharsRe.test(ast.value)) {
    throw new _error.GraphQLError('Query error: String must contain at least one special character', [ast]);
  }
};

var limitedStringCounter = 0;

var GraphQLLimitedString = /*#__PURE__*/function (_GraphQLCustomScalarT) {
  _inherits(GraphQLLimitedString, _GraphQLCustomScalarT);

  var _super = _createSuper(GraphQLLimitedString);

  function GraphQLLimitedString() {
    var min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
    var max = arguments.length > 1 ? arguments[1] : undefined;
    var alphabet = arguments.length > 2 ? arguments[2] : undefined;

    _classCallCheck(this, GraphQLLimitedString);

    var suffix = limitedStringCounter++ > 0 ? limitedStringCounter : '';
    var name = 'LimitedString' + suffix;
    var description = 'A limited string.';
    if (max) description += ' Has to be between ' + min + ' and ' + max + ' characters long.';else description += ' Has to be at least ' + min + ' characters long.';
    if (alphabet) description += ' May only contain the following characters: ' + alphabet;

    var validator = function validator(ast) {
      stringValidator(ast);
      lengthValidator(ast, min, max);
      if (alphabet) alphabetValidator(ast, alphabet);
      return ast.value;
    };

    return _super.call(this, name, description, validator);
  }

  return GraphQLLimitedString;
}(_types.GraphQLCustomScalarType);

exports.GraphQLLimitedString = GraphQLLimitedString;
;
var passwordCounter = 0;

var GraphQLPassword = /*#__PURE__*/function (_GraphQLCustomScalarT2) {
  _inherits(GraphQLPassword, _GraphQLCustomScalarT2);

  var _super2 = _createSuper(GraphQLPassword);

  function GraphQLPassword() {
    var min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
    var max = arguments.length > 1 ? arguments[1] : undefined;
    var alphabet = arguments.length > 2 ? arguments[2] : undefined;
    var complexity = arguments.length > 3 ? arguments[3] : undefined;

    _classCallCheck(this, GraphQLPassword);

    var suffix = passwordCounter++ > 0 ? passwordCounter : '';
    var name = 'Password' + suffix;
    var description = 'A password string.';
    if (max) description += ' Has to be between ' + min + ' and ' + max + ' characters long.';else description += ' Has to be at least ' + min + ' characters long.';
    if (alphabet) description += ' May only contain the following characters: ' + alphabet;

    if (complexity) {
      if (complexity.alphaNumeric) description += ' Has to be alpha numeric.';
      if (complexity.mixedCase) description += ' Has to be mixed case.';
      if (complexity.specialChars) description += ' Has to contain special characters.';
    }

    var validator = function validator(ast) {
      stringValidator(ast);
      lengthValidator(ast, min, max);
      if (alphabet) alphabetValidator(ast, alphabet);
      if (complexity) complexityValidator(ast, complexity);
      return ast.value;
    };

    return _super2.call(this, name, description, validator);
  }

  return GraphQLPassword;
}(_types.GraphQLCustomScalarType);

exports.GraphQLPassword = GraphQLPassword;
;
var GraphQLDateTime = factory.getCustomScalar('DateTime', 'The DateTime scalar type represents date time strings complying to ISO-8601.', function (ast) {
  stringValidator(ast);

  if (isNaN(Date.parse(ast.value))) {
    throw new _error.GraphQLError('Query error: String is not a valid date time string', [ast]);
  }

  return ast.value;
});
exports.GraphQLDateTime = GraphQLDateTime;